// Generated by LiveScript 1.3.1
var mpthis, axioms, res$, i$, ref$, len$, p, assumptions, steps, assumption_vars, prop_table, get_prop, step_reasons, selected, selected_seq, sub_seq, mk_sub, mk_li, prop_selected, get_sub_prop, init_proof, add_mp, add_assumption, add_sub;
mpthis = function(){
  var P, P_then_Q, Q, Qexpr;
  P = parse(document.getElementById('P').value);
  P_then_Q = parse(document.getElementById('P_then_Q').value);
  Q = MP(P, P_then_Q);
  Qexpr = ptree_to_expression(Q);
  return document.getElementById('output').innerHTML = '<div>' + Qexpr + '</div>';
};
res$ = [];
for (i$ = 0, len$ = (ref$ = ['p>q>p', '(p>q>r)>(p>q)>p>r', '(!p>!q)>q>p']).length; i$ < len$; ++i$) {
  p = ref$[i$];
  res$.push(sub_vars(parse(p), {
    p: '_p_',
    q: '_q_',
    r: '_r_'
  }));
}
axioms = res$;
assumptions = [];
steps = [];
assumption_vars = [];
prop_table = {
  A: axioms,
  H: assumptions,
  S: steps
};
get_prop = function(s){
  return prop_table[s[0]][(s.slice(1) | 0) - 1];
};
step_reasons = [];
selected = [];
selected_seq = [];
sub_seq = [];
mk_sub = function(p){
  var seq, label, input, li;
  seq = 'subvar_' + p;
  sub_seq.push(seq);
  label = '<span>' + p + '</span> ';
  input = '<input width=50 id="' + seq + '" value="' + p.replace(/_/g, '') + '"/>';
  li = '<li>' + label + " : " + input + '</li>';
  return $('#sub_vars').append(li);
};
mk_li = function(prefix, num, p, reason){
  var seq, label, expr, remark, li;
  seq = prefix + num;
  label = '<span>' + seq + '</span>';
  expr = '<input style="font-size: large" value="' + ptree_to_expression(p) + '" size=40 readonly/>';
  remark = '<span>(' + reason + ')</span>';
  li = '<li id="step_' + seq + '">' + label + " : " + expr + "&nbsp; " + remark + '</li>';
  $('#proof').append(li);
};
prop_selected = function(event, ui){
  var res$, i$, len$, x, vars, p;
  selected = $('.ui-selected');
  res$ = [];
  for (i$ = 0, len$ = selected.length; i$ < len$; ++i$) {
    x = selected[i$];
    res$.push(x.id.slice(5));
  }
  selected_seq = res$;
  $('#selected_steps').html(selected_seq.join(","));
  if (selected.length >= 1) {
    $('#mp_p1').html($(selected[0]).html());
    $('#sub_p').html($(selected[0]).html());
    vars = get_vars(get_prop(selected_seq[0]));
    $('#sub_vars').html('');
    sub_seq = [];
    for (i$ = 0, len$ = vars.length; i$ < len$; ++i$) {
      p = vars[i$];
      if (!in$(p, assumption_vars)) {
        mk_sub(p);
      }
    }
  } else {
    $('#mp_p1').html('Please select steps');
    $('#sub_p').html('Please select steps');
    $('#sub_vars').html('');
    sub_seq = [];
  }
  if (selected.length >= 2) {
    $('#mp_p2').html($(selected[1]).html());
  } else {
    $('#mp_p2').html('Please select steps');
  }
};
get_sub_prop = function(){
  return 1;
};
init_proof = function(){
  var i$, ref$, len$, i, ax;
  $('#tabs').tabs();
  for (i$ = 0, len$ = (ref$ = axioms).length; i$ < len$; ++i$) {
    i = i$;
    ax = ref$[i$];
    mk_li('A', i + 1, ax, "axiom");
  }
  $('.prop_list').selectable({
    selected: prop_selected,
    unselected: prop_selected
  });
};
add_mp = function(){
  var seq1, seq2, prop1, prop2, prop, message, prop_expr, i, reason;
  if (selected.length < 2) {
    $('#message').html('<span style="color: red"> need two propositions</span>');
    return;
  }
  seq1 = selected_seq[0];
  seq2 = selected_seq[1];
  prop1 = get_prop(seq1);
  prop2 = get_prop(seq2);
  try {
    prop = MP(prop1, prop2);
  } catch (e$) {
    message = e$.message;
    $('#message').html('<span style="color: red">' + message + '</span>');
  }
  prop_expr = ptree_to_expression(prop);
  i = steps.length;
  reason = ["MP", seq1, seq2];
  steps.push(prop);
  step_reasons.push(reason);
  mk_li('S', i + 1, prop, reason.join(','));
};
add_assumption = function(){
  var s, p, i, message, i$, ref$, len$;
  s = $('#new_assumption').val();
  try {
    p = parse(s);
    i = assumptions.length;
    assumptions.push(p);
    mk_li('H', i + 1, p, 'assumption');
    $('#message').html('<span style="color: green">OK!</span>');
  } catch (e$) {
    message = e$.message;
    $('#message').html('<span style="color: red">' + message + '</span>');
  }
  assumption_vars = [];
  for (i$ = 0, len$ = (ref$ = assumptions).length; i$ < len$; ++i$) {
    p = ref$[i$];
    Array.prototype.push.apply(assumption_vars, get_vars(p));
  }
  assumption_vars = sort_uniq(assumption_vars);
  return console.log(assumption_vars);
};
add_sub = function(){
  var seq1, prop1, table_items, res$, i$, ref$, len$, ss, table, k, v, prop, prop_expr, i, reason, table_src;
  if (selected.length < 1) {
    $('#message').html('<span style="color: red"> need a proposition</span>');
    return;
  }
  seq1 = selected_seq[0];
  prop1 = get_prop(seq1);
  res$ = [];
  for (i$ = 0, len$ = (ref$ = sub_seq).length; i$ < len$; ++i$) {
    ss = ref$[i$];
    res$.push([ss.slice(7), parse($('#' + ss).val())]);
  }
  table_items = res$;
  res$ = {};
  for (i$ = 0, len$ = table_items.length; i$ < len$; ++i$) {
    ref$ = table_items[i$], k = ref$[0], v = ref$[1];
if (k !== ptree_to_expression(v)) {
      if (k !== ptree_to_expression(v)) {
        res$[k] = v;
      }
    }
  }
  table = res$;
  console.log(table);
  prop = sub_vars(prop1, table);
  prop_expr = ptree_to_expression(prop);
  i = steps.length;
  reason = ["SUB", seq1, table];
  table_src = (function(){
    var ref$, results$ = [];
    for (k in ref$ = table) {
      v = ref$[k];
      results$.push(k + '/' + ptree_to_expression(v));
    }
    return results$;
  }()).join(',');
  steps.push(prop);
  step_reasons.push(reason);
  return mk_li('S', i + 1, prop, reason[0] + "," + reason[1] + "," + table_src);
};
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}